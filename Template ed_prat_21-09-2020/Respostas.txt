1) Qual a complexidade de tempo das seguintes funcoes/operadores: pertence(), insere(), numElementos(), +, *, - .

    a) pertence(): O(n);
    b) insere(): O(n);
    c) numelementos(): O(1);
    d) +: O(n²);
    e) -: O(n²);
    f) *: O(n²);

2) Considerando a função “+”, a ordem de complexidade do algoritmo depende da forma com que os elementos estão ordenados nos conjuntos? Justifique.

Não, independente da ordem fazemos a comparação de todos com A com todos de B.

3) Crie um programa que constrói dois conjuntos (do tipo Conjunto2) de inteiros A, B (cada um contendo n elementos, sendo que A = {1,2,3, …, n} e B={1,2,3, …, n} ) 
e, a seguir, calcule a união entre A e B utilizando o operador “+” (guarde o resultado disso em C). Por fim, imprima o resultado de “C.pertence(10)” na tela (não 
imprima o conjunto C… apenas o resultado dessa chamada -- isso deve ser feito para evitar que o compilador veja que nada está sendo feito com C e, assim, otimize 
o código removendo o cálculo de C). Meça o tempo de execuçao do seu programa para os seguintes valores de n: 10,100, 1000, 5000,10000, 20000,40000 . Escreva os 
tempos obtidos e o que você pode concluir a partir deles. Salve seu programa com o nome p31.cpp (e submeta junto com seu exercício).

10: 0,00s;
100: 0,00s;
1000: 0,01s;
5000: 0,13s;
10000: 0,45s;
20000: 1,97s;
40000: 7,81s;

4) Repita os testes acima supondo que, dessa vez, A = {1,2,3, …, n} e B={-1,-2,-3,-4,...,-n}. Houve diferença no tempo? Houve uma diferença na forma com que o tempo 
cresce? Por que isso ocorre? Salve seu programa com o nome p32.cpp (e submeta junto com seu exercício).

10: 0,00s;
100: 0,00s;
1000: 0,03s;
5000: 0,22s;
10000: 0,77s;
20000: 2,95s;
40000: 11,78s;

5) Repita os testes anteriores do item 4, mas agora compilando seu programa usando o comando “g++ -O3 programa.cpp”. A flag O3 ativa o nível de otimização máximo 
(o compilador utilizará muitas técnicas para melhorar o desempenho do seu programa). O que você observou em relação aos tempos obtidos?

5000: 0,04s;
10000: 0,15s;
20000: 0,47s;
40000: 1,84;

Com o uso da flag de otimização "-O3" obtive uma redução no tempo de execução de 5 a 10 vezes, aproximadamente.